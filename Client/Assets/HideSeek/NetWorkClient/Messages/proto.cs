// Generated by sprotodump. DO NOT EDIT!
// source: E:\Projects\HideSeek\FindHide_svn\Assets\HideSeek\NetWorkClient\Messages\proto.sproto

using System;
using Sproto;
using System.Collections.Generic;

namespace SprotoType { 
	public class ButtonMsg : SprotoTypeBase {
		private static int max_field_count = 5;
		
		
		private Int64 _playerIndex; // tag 0
		public Int64 playerIndex {
			get { return _playerIndex; }
			set { base.has_field.set_field (0, true); _playerIndex = value; }
		}
		public bool HasPlayerIndex {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _btnType; // tag 1
		public Int64 btnType {
			get { return _btnType; }
			set { base.has_field.set_field (1, true); _btnType = value; }
		}
		public bool HasBtnType {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _btnAction; // tag 2
		public Int64 btnAction {
			get { return _btnAction; }
			set { base.has_field.set_field (2, true); _btnAction = value; }
		}
		public bool HasBtnAction {
			get { return base.has_field.has_field (2); }
		}

		private Int64 _btnValueX; // tag 3
		public Int64 btnValueX {
			get { return _btnValueX; }
			set { base.has_field.set_field (3, true); _btnValueX = value; }
		}
		public bool HasBtnValueX {
			get { return base.has_field.has_field (3); }
		}

		private Int64 _btnValueY; // tag 4
		public Int64 btnValueY {
			get { return _btnValueY; }
			set { base.has_field.set_field (4, true); _btnValueY = value; }
		}
		public bool HasBtnValueY {
			get { return base.has_field.has_field (4); }
		}

		public ButtonMsg () : base(max_field_count) {}

		public ButtonMsg (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.playerIndex = base.deserialize.read_integer ();
					break;
				case 1:
					this.btnType = base.deserialize.read_integer ();
					break;
				case 2:
					this.btnAction = base.deserialize.read_integer ();
					break;
				case 3:
					this.btnValueX = base.deserialize.read_integer ();
					break;
				case 4:
					this.btnValueY = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.playerIndex, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.btnType, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.btnAction, 2);
			}

			if (base.has_field.has_field (3)) {
				base.serialize.write_integer (this.btnValueX, 3);
			}

			if (base.has_field.has_field (4)) {
				base.serialize.write_integer (this.btnValueY, 4);
			}

			return base.serialize.close ();
		}
	}


	public class ControlMsg : SprotoTypeBase {
		private static int max_field_count = 3;
		
		
		private Int64 _playerIndex; // tag 0
		public Int64 playerIndex {
			get { return _playerIndex; }
			set { base.has_field.set_field (0, true); _playerIndex = value; }
		}
		public bool HasPlayerIndex {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _x; // tag 1
		public Int64 x {
			get { return _x; }
			set { base.has_field.set_field (1, true); _x = value; }
		}
		public bool HasX {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _y; // tag 2
		public Int64 y {
			get { return _y; }
			set { base.has_field.set_field (2, true); _y = value; }
		}
		public bool HasY {
			get { return base.has_field.has_field (2); }
		}

		public ControlMsg () : base(max_field_count) {}

		public ControlMsg (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.playerIndex = base.deserialize.read_integer ();
					break;
				case 1:
					this.x = base.deserialize.read_integer ();
					break;
				case 2:
					this.y = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.playerIndex, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.x, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.y, 2);
			}

			return base.serialize.close ();
		}
	}


	public class PlayerGamePlayMsg : SprotoTypeBase {
		private static int max_field_count = 7;
		
		
		private Int64 _playerIndex; // tag 0
		public Int64 playerIndex {
			get { return _playerIndex; }
			set { base.has_field.set_field (0, true); _playerIndex = value; }
		}
		public bool HasPlayerIndex {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _posX; // tag 1
		public Int64 posX {
			get { return _posX; }
			set { base.has_field.set_field (1, true); _posX = value; }
		}
		public bool HasPosX {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _posY; // tag 2
		public Int64 posY {
			get { return _posY; }
			set { base.has_field.set_field (2, true); _posY = value; }
		}
		public bool HasPosY {
			get { return base.has_field.has_field (2); }
		}

		private Int64 _posZ; // tag 3
		public Int64 posZ {
			get { return _posZ; }
			set { base.has_field.set_field (3, true); _posZ = value; }
		}
		public bool HasPosZ {
			get { return base.has_field.has_field (3); }
		}

		private Int64 _angleX; // tag 4
		public Int64 angleX {
			get { return _angleX; }
			set { base.has_field.set_field (4, true); _angleX = value; }
		}
		public bool HasAngleX {
			get { return base.has_field.has_field (4); }
		}

		private Int64 _angleY; // tag 5
		public Int64 angleY {
			get { return _angleY; }
			set { base.has_field.set_field (5, true); _angleY = value; }
		}
		public bool HasAngleY {
			get { return base.has_field.has_field (5); }
		}

		private Int64 _angleZ; // tag 6
		public Int64 angleZ {
			get { return _angleZ; }
			set { base.has_field.set_field (6, true); _angleZ = value; }
		}
		public bool HasAngleZ {
			get { return base.has_field.has_field (6); }
		}

		public PlayerGamePlayMsg () : base(max_field_count) {}

		public PlayerGamePlayMsg (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.playerIndex = base.deserialize.read_integer ();
					break;
				case 1:
					this.posX = base.deserialize.read_integer ();
					break;
				case 2:
					this.posY = base.deserialize.read_integer ();
					break;
				case 3:
					this.posZ = base.deserialize.read_integer ();
					break;
				case 4:
					this.angleX = base.deserialize.read_integer ();
					break;
				case 5:
					this.angleY = base.deserialize.read_integer ();
					break;
				case 6:
					this.angleZ = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.playerIndex, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.posX, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.posY, 2);
			}

			if (base.has_field.has_field (3)) {
				base.serialize.write_integer (this.posZ, 3);
			}

			if (base.has_field.has_field (4)) {
				base.serialize.write_integer (this.angleX, 4);
			}

			if (base.has_field.has_field (5)) {
				base.serialize.write_integer (this.angleY, 5);
			}

			if (base.has_field.has_field (6)) {
				base.serialize.write_integer (this.angleZ, 6);
			}

			return base.serialize.close ();
		}
	}


	public class UserInfo : SprotoTypeBase {
		private static int max_field_count = 4;
		
		
		private Int64 _playerIndex; // tag 0
		public Int64 playerIndex {
			get { return _playerIndex; }
			set { base.has_field.set_field (0, true); _playerIndex = value; }
		}
		public bool HasPlayerIndex {
			get { return base.has_field.has_field (0); }
		}

		private string _username; // tag 1
		public string username {
			get { return _username; }
			set { base.has_field.set_field (1, true); _username = value; }
		}
		public bool HasUsername {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _playerTeamType; // tag 2
		public Int64 playerTeamType {
			get { return _playerTeamType; }
			set { base.has_field.set_field (2, true); _playerTeamType = value; }
		}
		public bool HasPlayerTeamType {
			get { return base.has_field.has_field (2); }
		}

		private Int64 _userState; // tag 3
		public Int64 userState {
			get { return _userState; }
			set { base.has_field.set_field (3, true); _userState = value; }
		}
		public bool HasUserState {
			get { return base.has_field.has_field (3); }
		}

		public UserInfo () : base(max_field_count) {}

		public UserInfo (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.playerIndex = base.deserialize.read_integer ();
					break;
				case 1:
					this.username = base.deserialize.read_string ();
					break;
				case 2:
					this.playerTeamType = base.deserialize.read_integer ();
					break;
				case 3:
					this.userState = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.playerIndex, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_string (this.username, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.playerTeamType, 2);
			}

			if (base.has_field.has_field (3)) {
				base.serialize.write_integer (this.userState, 3);
			}

			return base.serialize.close ();
		}
	}


	public class clientBtn {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 4;
			
			
			private Int64 _btnType; // tag 0
			public Int64 btnType {
				get { return _btnType; }
				set { base.has_field.set_field (0, true); _btnType = value; }
			}
			public bool HasBtnType {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _btnAction; // tag 1
			public Int64 btnAction {
				get { return _btnAction; }
				set { base.has_field.set_field (1, true); _btnAction = value; }
			}
			public bool HasBtnAction {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _btnValueX; // tag 2
			public Int64 btnValueX {
				get { return _btnValueX; }
				set { base.has_field.set_field (2, true); _btnValueX = value; }
			}
			public bool HasBtnValueX {
				get { return base.has_field.has_field (2); }
			}

			private Int64 _btnValueY; // tag 3
			public Int64 btnValueY {
				get { return _btnValueY; }
				set { base.has_field.set_field (3, true); _btnValueY = value; }
			}
			public bool HasBtnValueY {
				get { return base.has_field.has_field (3); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.btnType = base.deserialize.read_integer ();
						break;
					case 1:
						this.btnAction = base.deserialize.read_integer ();
						break;
					case 2:
						this.btnValueX = base.deserialize.read_integer ();
						break;
					case 3:
						this.btnValueY = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.btnType, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.btnAction, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.btnValueX, 2);
				}

				if (base.has_field.has_field (3)) {
					base.serialize.write_integer (this.btnValueY, 3);
				}

				return base.serialize.close ();
			}
		}


	}


	public class clientControl {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private Int64 _x; // tag 0
			public Int64 x {
				get { return _x; }
				set { base.has_field.set_field (0, true); _x = value; }
			}
			public bool HasX {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _y; // tag 1
			public Int64 y {
				get { return _y; }
				set { base.has_field.set_field (1, true); _y = value; }
			}
			public bool HasY {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.x = base.deserialize.read_integer ();
						break;
					case 1:
						this.y = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.x, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.y, 1);
				}

				return base.serialize.close ();
			}
		}


	}


	public class gameTick {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 4;
			
			
			private Int64 _frame; // tag 0
			public Int64 frame {
				get { return _frame; }
				set { base.has_field.set_field (0, true); _frame = value; }
			}
			public bool HasFrame {
				get { return base.has_field.has_field (0); }
			}

			private List<ControlMsg> _controlMsg; // tag 1
			public List<ControlMsg> controlMsg {
				get { return _controlMsg; }
				set { base.has_field.set_field (1, true); _controlMsg = value; }
			}
			public bool HasControlMsg {
				get { return base.has_field.has_field (1); }
			}

			private List<ButtonMsg> _buttonMsg; // tag 2
			public List<ButtonMsg> buttonMsg {
				get { return _buttonMsg; }
				set { base.has_field.set_field (2, true); _buttonMsg = value; }
			}
			public bool HasButtonMsg {
				get { return base.has_field.has_field (2); }
			}

			private List<PlayerGamePlayMsg> _playersGamePlayMsg; // tag 3
			public List<PlayerGamePlayMsg> playersGamePlayMsg {
				get { return _playersGamePlayMsg; }
				set { base.has_field.set_field (3, true); _playersGamePlayMsg = value; }
			}
			public bool HasPlayersGamePlayMsg {
				get { return base.has_field.has_field (3); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.frame = base.deserialize.read_integer ();
						break;
					case 1:
						this.controlMsg = base.deserialize.read_obj_list<ControlMsg> ();
						break;
					case 2:
						this.buttonMsg = base.deserialize.read_obj_list<ButtonMsg> ();
						break;
					case 3:
						this.playersGamePlayMsg = base.deserialize.read_obj_list<PlayerGamePlayMsg> ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.frame, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_obj (this.controlMsg, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_obj (this.buttonMsg, 2);
				}

				if (base.has_field.has_field (3)) {
					base.serialize.write_obj (this.playersGamePlayMsg, 3);
				}

				return base.serialize.close ();
			}
		}


	}


	public class handshake {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private Int64 _socketfd; // tag 0
			public Int64 socketfd {
				get { return _socketfd; }
				set { base.has_field.set_field (0, true); _socketfd = value; }
			}
			public bool HasSocketfd {
				get { return base.has_field.has_field (0); }
			}

			private string _msg; // tag 1
			public string msg {
				get { return _msg; }
				set { base.has_field.set_field (1, true); _msg = value; }
			}
			public bool HasMsg {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.socketfd = base.deserialize.read_integer ();
						break;
					case 1:
						this.msg = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.socketfd, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.msg, 1);
				}

				return base.serialize.close ();
			}
		}


	}


	public class heartbeat {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 6;
			
			
			private Int64 _posX; // tag 0
			public Int64 posX {
				get { return _posX; }
				set { base.has_field.set_field (0, true); _posX = value; }
			}
			public bool HasPosX {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _posY; // tag 1
			public Int64 posY {
				get { return _posY; }
				set { base.has_field.set_field (1, true); _posY = value; }
			}
			public bool HasPosY {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _posZ; // tag 2
			public Int64 posZ {
				get { return _posZ; }
				set { base.has_field.set_field (2, true); _posZ = value; }
			}
			public bool HasPosZ {
				get { return base.has_field.has_field (2); }
			}

			private Int64 _angleX; // tag 3
			public Int64 angleX {
				get { return _angleX; }
				set { base.has_field.set_field (3, true); _angleX = value; }
			}
			public bool HasAngleX {
				get { return base.has_field.has_field (3); }
			}

			private Int64 _angleY; // tag 4
			public Int64 angleY {
				get { return _angleY; }
				set { base.has_field.set_field (4, true); _angleY = value; }
			}
			public bool HasAngleY {
				get { return base.has_field.has_field (4); }
			}

			private Int64 _angleZ; // tag 5
			public Int64 angleZ {
				get { return _angleZ; }
				set { base.has_field.set_field (5, true); _angleZ = value; }
			}
			public bool HasAngleZ {
				get { return base.has_field.has_field (5); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.posX = base.deserialize.read_integer ();
						break;
					case 1:
						this.posY = base.deserialize.read_integer ();
						break;
					case 2:
						this.posZ = base.deserialize.read_integer ();
						break;
					case 3:
						this.angleX = base.deserialize.read_integer ();
						break;
					case 4:
						this.angleY = base.deserialize.read_integer ();
						break;
					case 5:
						this.angleZ = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.posX, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.posY, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.posZ, 2);
				}

				if (base.has_field.has_field (3)) {
					base.serialize.write_integer (this.angleX, 3);
				}

				if (base.has_field.has_field (4)) {
					base.serialize.write_integer (this.angleY, 4);
				}

				if (base.has_field.has_field (5)) {
					base.serialize.write_integer (this.angleZ, 5);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 0;
			
			
			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				return base.serialize.close ();
			}
		}


	}


	public class matchMsg {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private Int64 _matchMsgType; // tag 0
			public Int64 matchMsgType {
				get { return _matchMsgType; }
				set { base.has_field.set_field (0, true); _matchMsgType = value; }
			}
			public bool HasMatchMsgType {
				get { return base.has_field.has_field (0); }
			}

			private string _matchInfo; // tag 1
			public string matchInfo {
				get { return _matchInfo; }
				set { base.has_field.set_field (1, true); _matchInfo = value; }
			}
			public bool HasMatchInfo {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.matchMsgType = base.deserialize.read_integer ();
						break;
					case 1:
						this.matchInfo = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.matchMsgType, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.matchInfo, 1);
				}

				return base.serialize.close ();
			}
		}


	}


	public class package : SprotoTypeBase {
		private static int max_field_count = 2;
		
		
		private Int64 _type; // tag 0
		public Int64 type {
			get { return _type; }
			set { base.has_field.set_field (0, true); _type = value; }
		}
		public bool HasType {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _session; // tag 1
		public Int64 session {
			get { return _session; }
			set { base.has_field.set_field (1, true); _session = value; }
		}
		public bool HasSession {
			get { return base.has_field.has_field (1); }
		}

		public package () : base(max_field_count) {}

		public package (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.type = base.deserialize.read_integer ();
					break;
				case 1:
					this.session = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.type, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.session, 1);
			}

			return base.serialize.close ();
		}
	}


	public class restoreStates {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private Int64 _serverState; // tag 0
			public Int64 serverState {
				get { return _serverState; }
				set { base.has_field.set_field (0, true); _serverState = value; }
			}
			public bool HasServerState {
				get { return base.has_field.has_field (0); }
			}

			private string _stateInfo; // tag 1
			public string stateInfo {
				get { return _stateInfo; }
				set { base.has_field.set_field (1, true); _stateInfo = value; }
			}
			public bool HasStateInfo {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.serverState = base.deserialize.read_integer ();
						break;
					case 1:
						this.stateInfo = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.serverState, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.stateInfo, 1);
				}

				return base.serialize.close ();
			}
		}


	}


	public class usersInfoMsg {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private Int64 _curUserGlobalIndex; // tag 0
			public Int64 curUserGlobalIndex {
				get { return _curUserGlobalIndex; }
				set { base.has_field.set_field (0, true); _curUserGlobalIndex = value; }
			}
			public bool HasCurUserGlobalIndex {
				get { return base.has_field.has_field (0); }
			}

			private List<UserInfo> _userArray; // tag 1
			public List<UserInfo> userArray {
				get { return _userArray; }
				set { base.has_field.set_field (1, true); _userArray = value; }
			}
			public bool HasUserArray {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.curUserGlobalIndex = base.deserialize.read_integer ();
						break;
					case 1:
						this.userArray = base.deserialize.read_obj_list<UserInfo> ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.curUserGlobalIndex, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_obj (this.userArray, 1);
				}

				return base.serialize.close ();
			}
		}


	}


	public class waitforstart {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _readyFrame; // tag 0
			public Int64 readyFrame {
				get { return _readyFrame; }
				set { base.has_field.set_field (0, true); _readyFrame = value; }
			}
			public bool HasReadyFrame {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.readyFrame = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.readyFrame, 0);
				}

				return base.serialize.close ();
			}
		}


	}


}

